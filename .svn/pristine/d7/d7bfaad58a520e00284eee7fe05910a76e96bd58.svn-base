package com.luer.storemanager.controller;

import com.luer.comm.utils.ResultSet;
import com.luer.storemanager.bean.Preview;
import com.luer.storemanager.bean.PreviewEvents;
import com.luer.storemanager.bean.PreviewManager;
import com.luer.storemanager.bean.PreviewRoomResource;
import com.luer.storemanager.service.PreviewService;
import com.luer.storesdata.bean.RoomResources;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.List;

/**
 * 房间预览控制层
 *
 * @ClassName PreviewController
 * @Author GavinJiang
 * @Date 2018/8/15 20:06.
 */
@Controller
@RequestMapping("/preview")
public class PreviewController {
    @Autowired
    private PreviewService previewService;

    /**根据妈妈查询其房间
    * @author 张路明
    */
    @GetMapping("/getRoomsBymotherId")
    @ResponseBody
    public List<Preview> getRoomsBymotherId(String motherid){
        List<Preview> list = previewService.getRoomsBymotherId(motherid);
        return list;
    }
    /** 
     * 查询所有的房间预览信息
     * @author GavinJiang
     * @date 2018/8/20 17:40
     * @params
     */
    @ResponseBody
    @RequestMapping("selectPreviewAll")
    public List<Preview> selectPreviewAll() {
        List<Preview> temperatureRegisterAll = previewService.selectPreview();
        return temperatureRegisterAll;
    }
    /*
    * 换房调整
    * */
    @ResponseBody
    @RequestMapping("selectPreviewByStoreId")
    public List<PreviewManager> selectPreviewByStoreId(@NonNull String storeId ) {
        List<PreviewManager> previewManagers = previewService.selectPreviewByStoreId(storeId);
        return previewManagers;
    }
    @ResponseBody
    @RequestMapping("updateOnePreview")
    public ResultSet updateOnePreview(@NonNull PreviewManager previewManager ) {
        previewService.updatePreview(previewManager);
        return ResultSet.getSuccess();
    }
    @ResponseBody
    @RequestMapping("addOnePreview")
    public ResultSet addOnePreview(@NonNull PreviewManager previewManager ) {
        previewService.addOnePreview(previewManager);
        return ResultSet.getSuccess();
    }



    /**
     * 通过开始时间和结束时间查询所有的房间的房态状况
     *
     * @param begin_time 开始时间
     *   结束时间
     * @return
     * @author GavinJiang
     * @date 2018/8/15 15:53
     * @params
     */
    @ResponseBody
    @RequestMapping("selectPreviewByTimeAll")
    public List<PreviewEvents> selectPreviewByTimeAll(Date begin_time, String storeid) {
        /*begin_time=new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(begin_time);
        calendar.add(Calendar.DAY_OF_YEAR,+5);
        calendar.add(Calendar.MONTH,+1);
        end_time=calendar.getTime();
        calendar.setTime(begin_time);
        calendar.add(Calendar.DAY_OF_YEAR,-5);
        begin_time=calendar.getTime();
        SimpleDateFormat f=new SimpleDateFormat("yyyy年MM月dd日 E kk点mm分");*/
        //System.out.print(f.format(begin_time)+"22222222222222222222222"+f.format(end_time));
        //List<Preview> previews=previewService.selectPreviewByTime(begin_time, storeid);
        //System.out.print(previews.get(0).getBeginTime());
        System.out.println("selectPreviewByTimeAll");
        List<PreviewEvents> previewEventsList = previewService.selectPreviewByTime(begin_time,storeid);
        for(PreviewEvents p : previewEventsList){
            System.out.println(p);
        }
        return previewEventsList;
    }

    /**
     * 添加房间预览信息
     *
     * @param record
     * @return int
     * @author GavinJiang
     * @date 2018/8/15 18:42
     * @params
     */
    @ResponseBody
    @RequestMapping("addPreview")
    public ResultSet addPreview(Preview record) {
        previewService.insert(record);
        return ResultSet.getSuccess();
    }

    /**
     * 修改房间预览信息
     *
     * @param record
     * @return int
     * @author GavinJiang
     * @date 2018/8/15 18:43
     * @params
     */
    @ResponseBody
    @RequestMapping("updatePreview")
    public ResultSet updatePreview(Preview record,HttpSession session) {
        record.setStoreId((String) session.getAttribute("storeId"));
        previewService.updateByPrimaryKeySelective(record);
        return ResultSet.getSuccess();
    }

    /**
     * 删除房间预览
     *
     * @param id
     * @return int
     * @author GavinJiang
     * @date 2018/8/15 18:43
     * @params
     */
    @ResponseBody
    @RequestMapping("deletePreview")
    public ResultSet deletePreview(String id) {
        previewService.deleteByPrimaryKey(id);
        return ResultSet.getSuccess();
    }

    /**
     * @author EVEA
     * @return 房间号
     */
    @ResponseBody
    @RequestMapping("getPreRomRes")
    public List<PreviewRoomResource> getPreRomRes(HttpSession session){
        String storeid = (String)session.getAttribute("storeId");
        return previewService.selectPreRomRes(storeid);
    }

    /**
     * @author EVEA
     * @return    /getAllRomEve  查询妈妈姓名
     */
    @ResponseBody
    @RequestMapping("/getAllRomEve")
    public List<PreviewEvents> getAllRomEve(HttpSession session){
        String storeid = (String)session.getAttribute("storeId");
        return previewService.selectAllEve(storeid);
    }
    @ResponseBody
    @RequestMapping("/getAllMother")
    public List<RoomResources> getAllMother(String storeId){

        return previewService.getAllMotherEve(storeId);
    }


    @ResponseBody
    @RequestMapping("/getMother")
    public List<PreviewEvents> getMother(String storeId){

        return previewService.selectAllMother(storeId);
    }

}
