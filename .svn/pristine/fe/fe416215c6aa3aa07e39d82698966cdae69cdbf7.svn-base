package com.luer.storemanager.controller;

import com.luer.comm.utils.ResultSet;
import com.luer.storemanager.bean.Schedule;
import com.luer.storemanager.bean.ScheduleList;
import com.luer.storemanager.service.ScheduleService;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * @description 排班控制层
 * @ClassName ScheduleController
 * @Author GavinJiang
 * @Date 2018/8/14 11:51.
 */
@Controller
@RequestMapping("/schedule")
public class ScheduleController {
    @Autowired
    private ScheduleService scheduleService;
    /**
     * @return
     * @description 查询所有的排班信息
     */
    @ResponseBody
    @RequestMapping("advanceSchedule")
    public ResultSet advanceSchedule(@NonNull String storeId){

        scheduleService.advanceSchedule(storeId);
        return ResultSet.getSuccess();
    }

    @ResponseBody
    @RequestMapping("selectScheduleAll")
    public List<ScheduleList> selectScheduleAll() {
        List<ScheduleList> scheduleAll = scheduleService.selectSchedule();
        return scheduleAll;
    }


    /** 
     * 添加排班信息
     * @author GavinJiang
     * @date 2018/8/14 12:01
     * @params 
     * @param record 当前排班对象
     * @param date 日期,用来添加对应的开始时间和结束时间
     * @return com.luer.comm.utils.ResultSet  
     */
    @ResponseBody
    @RequestMapping("addSchedule")
    public ResultSet addSchedule(Schedule record,String date) throws ParseException{
        scheduleService.insert(record,date);
        return ResultSet.getSuccess();
    }

    /**
     * @return
     * @description 修改排班信息
     * @author GavinJiang
     * @date 2018/8/14 12:02
     * @params [sSchedule]
     */
    @ResponseBody
    @RequestMapping("updateSchedule")
    public ResultSet updateSchedule(Schedule record) {
        scheduleService.updateByPrimaryKeySelective(record);
        return ResultSet.getSuccess();
    }

    /**
     * 根据id删除排班信息
     *
     * @param id
     * @return
     * @author GavinJiang
     * @date 2018/8/14 17:48
     * @params
     */
    @ResponseBody
    @RequestMapping("daleteSchedule")
    public ResultSet daleteSchedule(@NonNull String id) {
        scheduleService.deleteByPrimaryKey(id);
        return ResultSet.getSuccess();
    }

    /**
     * 根据id批量删除排班信息
     *
     * @param ids
     * @return
     * @author GavinJiang
     * @date 2018/8/14 17:48
     * @params
     */
    @ResponseBody
    @RequestMapping("daleteSchedules")
    public ResultSet daleteSchedules(@NonNull String ids) {
        String[] id = ids.split(",");
        for (int i = 0; i < id.length; i++) {
            scheduleService.deleteByPrimaryKey(id[i]);
        }
        return ResultSet.getSuccess();
    }

    /**
     * 根据员工id、所在部门和班次类型查询对应的排班信息
     *
     * @param employId   员工id
     * @param department 所在部门
     * @param type       班次类型
     * @return
     * @author GavinJiang
     * @date 2018/8/14 17:57
     * @params
     */
    @ResponseBody
    @RequestMapping("selectScheduleByType")
    public ResultSet selectScheduleByType(@NonNull String employId, String department, String type) {
        List<Schedule> selectScheduleByTypeAll = scheduleService.selectScheduleByType(employId, department, type);
        return ResultSet.getSuccess(selectScheduleByTypeAll);
    }

    /**
     * 根据开始时间、结束时间、员工id、所在部门和班次类型查询对应的排班信息(条件可为null)
     *
     * @param startTime  开始时间
     * @param endTime    结束时间
     * @param employId   员工id
     * @param department 所在部门
     * @param type       班次类型
     * @return
     * @author GavinJiang
     * @date 2018/8/14 18:01
     * @params
     */
    @ResponseBody
    @RequestMapping("selectScheduleByTime")
    public ResultSet selectScheduleByTime(Date startTime, Date endTime, String employId, String department, String type) {
        List<Schedule> selectScheduleByTimeAll = scheduleService.selectScheduleByTime(startTime, endTime, employId, department, type);
        return ResultSet.getSuccess(selectScheduleByTimeAll);
    }

    /**
     * 批量修改排班信息
     *
     * @param records
     * @return com.luer.comm.utils.ResultSet
     * @author GavinJiang
     * @date 2018/8/29 14:52
     * @params
     */
    @ResponseBody
    @RequestMapping("updateSchedules")
    public ResultSet updateSchedule(List<Schedule> records) {
        for (Schedule record : records) {
            scheduleService.updateByPrimaryKeySelective(record);
        }
        return ResultSet.getSuccess();
    }

    /**
     * @return
     * @description 查询所有的排班信息
     */
    @ResponseBody
    @RequestMapping("selectScheduleAllList")
    public List selectScheduleAllList(@NonNull String storeId) {
        List selectScheduleAllList = scheduleService.selectScheduleAllList(storeId);
        return selectScheduleAllList;
    }

    /**
     * 根据id修改排班信息
     *
     * @param id        排班id
     * @param starttime 开始时间
     * @param endtime   结束时间
     * @param employid  员工id
     * @return com.luer.comm.utils.ResultSet
     * @author GavinJiang
     * @params
     */
    @ResponseBody
    @RequestMapping("updateScheduleById")
    public ResultSet updateScheduleById(String id, String starttime, String endtime, String employid) {
        scheduleService.updateScheduleById(id, starttime, endtime, employid);
        return ResultSet.getSuccess();
    }

    /**
     * 系统默认的排班规则,循环遍历员工表,在需要排班的日期内，根据排班人数，每天都生成相应的排班信息
     *
     * @return int
     * @author GavinJiang
     * @params
     */
    @ResponseBody
    @RequestMapping("defaultSchedule")
    public int defaultSchedule() throws ParseException{
        //定义格式化时间
        SimpleDateFormat sf1 = new SimpleDateFormat("yyyy-MM-dd 00:00:00");
        SimpleDateFormat sf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date da1=new Date();
        //把当天日期加1,即第二天
        Calendar c = Calendar.getInstance();
        c.setTime(da1);
        c.add(Calendar.DAY_OF_MONTH, 1);// 今天+1天
        da1 = c.getTime();
        scheduleService.defaultSchedule(sf2.parse(sf1.format(new Date())),sf2.parse(sf1.format(da1)),4);
        return 1;
    }
}


