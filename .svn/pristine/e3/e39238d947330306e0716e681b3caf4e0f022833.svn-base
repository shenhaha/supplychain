<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.luer.stockandsales.dao.PurchaseMapper">
    <resultMap id="BaseResultMap" type="com.luer.stockandsales.bean.Purchase">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="store_id" property="storeId" jdbcType="VARCHAR"/>
        <result column="goods_order_id" property="goodsOrderId" jdbcType="VARCHAR"/>
        <result column="purchase_time" property="purchaseTime" jdbcType="TIMESTAMP"/>
        <result column="employer_id" property="employerId" jdbcType="VARCHAR"/>
        <result column="payable" property="payable" jdbcType="DOUBLE"/>
        <result column="employerName" property="employerName" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, store_id, goods_order_id, purchase_time, employer_id, payable, type
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.luer.stockandsales.bean.PurchaseExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from purchase
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from purchase
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from purchase
        where id = #{id,jdbcType=VARCHAR}
    </delete>
    <delete id="deleteByExample" parameterType="com.luer.stockandsales.bean.PurchaseExample">
        delete from purchase
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.luer.stockandsales.bean.Purchase">
        insert into purchase (id, store_id, goods_order_id,
        purchase_time, employer_id, payable,
        type)
        values (#{id,jdbcType=VARCHAR}, #{storeId,jdbcType=VARCHAR}, #{goodsOrderId,jdbcType=VARCHAR},
        #{purchaseTime,jdbcType=TIMESTAMP}, #{employerId,jdbcType=VARCHAR}, #{payable,jdbcType=DOUBLE},
        #{type,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.luer.stockandsales.bean.Purchase">
        insert into purchase
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="storeId != null">
                store_id,
            </if>
            <if test="goodsOrderId != null">
                goods_order_id,
            </if>
            <if test="purchaseTime != null">
                purchase_time,
            </if>
            <if test="employerId != null">
                employer_id,
            </if>
            <if test="payable != null">
                payable,
            </if>
            <if test="type != null">
                type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="storeId != null">
                #{storeId,jdbcType=VARCHAR},
            </if>
            <if test="goodsOrderId != null">
                #{goodsOrderId,jdbcType=VARCHAR},
            </if>
            <if test="purchaseTime != null">
                #{purchaseTime,jdbcType=TIMESTAMP},
            </if>
            <if test="employerId != null">
                #{employerId,jdbcType=VARCHAR},
            </if>
            <if test="payable != null">
                #{payable,jdbcType=DOUBLE},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.luer.stockandsales.bean.PurchaseExample"
            resultType="java.lang.Integer">
        select count(*) from purchase
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update purchase
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=VARCHAR},
            </if>
            <if test="record.storeId != null">
                store_id = #{record.storeId,jdbcType=VARCHAR},
            </if>
            <if test="record.goodsOrderId != null">
                goods_order_id = #{record.goodsOrderId,jdbcType=VARCHAR},
            </if>
            <if test="record.purchaseTime != null">
                purchase_time = #{record.purchaseTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.employerId != null">
                employer_id = #{record.employerId,jdbcType=VARCHAR},
            </if>
            <if test="record.payable != null">
                payable = #{record.payable,jdbcType=DOUBLE},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update purchase
        set id = #{record.id,jdbcType=VARCHAR},
        store_id = #{record.storeId,jdbcType=VARCHAR},
        goods_order_id = #{record.goodsOrderId,jdbcType=VARCHAR},
        purchase_time = #{record.purchaseTime,jdbcType=TIMESTAMP},
        employer_id = #{record.employerId,jdbcType=VARCHAR},
        payable = #{record.payable,jdbcType=DOUBLE},
        type = #{record.type,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.luer.stockandsales.bean.Purchase">
        update purchase
        <set>
            <if test="storeId != null">
                store_id = #{storeId,jdbcType=VARCHAR},
            </if>
            <if test="goodsOrderId != null">
                goods_order_id = #{goodsOrderId,jdbcType=VARCHAR},
            </if>
            <if test="purchaseTime != null">
                purchase_time = #{purchaseTime,jdbcType=TIMESTAMP},
            </if>
            <if test="employerId != null">
                employer_id = #{employerId,jdbcType=VARCHAR},
            </if>
            <if test="payable != null">
                payable = #{payable,jdbcType=DOUBLE},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.luer.stockandsales.bean.Purchase">
        update purchase
        set store_id = #{storeId,jdbcType=VARCHAR},
        goods_order_id = #{goodsOrderId,jdbcType=VARCHAR},
        purchase_time = #{purchaseTime,jdbcType=TIMESTAMP},
        employer_id = #{employerId,jdbcType=VARCHAR},
        payable = #{payable,jdbcType=DOUBLE},
        type = #{type,jdbcType=INTEGER}
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <select id="selectAll" resultMap="BaseResultMap">
        select * from purchase
    </select>
    <!--查询门店进货信息-->
    <select id="selectByStoreId" resultMap="BaseResultMap">
        select p.id,p.store_id,p.goods_order_id,p.purchase_time,
        p.employer_id,p.payable,e.name as employerName,p.type
        from purchase p LEFT JOIN employer e on p.employer_id=e.id
        where p.store_id=#{storeId}
    </select>
    <!--根据订单id查询门店的进货信息-->
    <select id="selectPurchasebyOrderIdlist" resultMap="BaseResultMap" parameterType="java.util.List">
        select p.id,p.store_id,p.goods_order_id,p.purchase_time,
        p.employer_id,p.payable,e.name as employerName,p.type
        from purchase p LEFT JOIN employer e on p.employer_id=e.id
        where p.goods_order_id in
        <foreach collection="orderIdList" item="orderId" index="index" open="(" separator="," close=")">
            #{orderId}
        </foreach>

    </select>
    <!--根据订单id查询对应的进货信息-->
    <select id="selectByOrderId" resultMap="BaseResultMap">
    select p.id,p.store_id,p.goods_order_id,p.purchase_time,
        p.employer_id,p.payable,e.name as employerName,p.type
    from purchase p LEFT JOIN employer e on p.employer_id=e.id
    where p.goods_order_id = #{orderId}
    </select>
    <select id="selectPurchaseBystoreIdList" resultMap="BaseResultMap">
        select p.id,p.store_id,p.goods_order_id,p.purchase_time,
        p.employer_id,p.payable,e.name as employerName,p.type
        from purchase p LEFT JOIN employer e on p.employer_id=e.id
        where store_id in
        <foreach collection="storeIdList" item="storeId" index="index" open="(" separator="," close=")">
            #{storeId}
        </foreach>
        and DATE_FORMAT(purchase_time,'%Y%m') = DATE_FORMAT(CURDATE( ),'%Y%m' )
    </select>


    <select id="selectPurchaseIdsBystoreIdList" resultType="java.lang.String">
        select id from purchase where store_id in
        <foreach collection="storeIdList" item="storeId" index="index" open="(" separator="," close=")">
            #{storeId}
        </foreach>
        and DATE_FORMAT(purchase_time,'%Y%m') = DATE_FORMAT(CURDATE( ),'%Y%m' )
    </select>
    <select id="selectPurchaseBystoreId" resultMap="BaseResultMap">
        select p.id,p.store_id,p.goods_order_id,p.purchase_time,
        p.employer_id,p.payable,e.name as employerName,p.type
        from purchase p LEFT JOIN employer e on p.employer_id=e.id
        where p.store_id =#{storeId} and p.type=#{type}
    </select>
</mapper>