package com.luer.storemanager.controller;


import com.luer.comm.utils.ResultSet;
import com.luer.storemanager.bean.TemperatureRegister;
import com.luer.storemanager.service.TemperatureRegisterService;
import lombok.NonNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * @author GavinJiang
 * @description 门店人员体温记录控制类
 * @date 2018/8/13 16:31
 */
@Controller
@RequestMapping("/temperatureRegister")
public class TemperatureRegisterController {
    @Autowired
    private TemperatureRegisterService temperatureRegisterService;


    /**
     * @return
     * @description 设置跳转到门店人员体温记录页面，查询对应的信息
     * @author GavinJiang
     * @date 2018/8/13 15:31
     * @params
     */
    @ResponseBody
    @RequestMapping("selectTemperatureRegisteAll")
    public List<TemperatureRegister> selectTemperatureRegisteAll(@NonNull String storeId) {
        List<TemperatureRegister> temperatureRegisterAll = temperatureRegisterService.selectTemperatureRegiste(storeId);
        return temperatureRegisterAll;
    }

    /**
     * @return
     * @description 添加门店人员体温信息
     * @author GavinJiang
     * @date 2018/8/13 15:43
     * @params [temperatureRegiste]
     */
    @ResponseBody
    @RequestMapping("addTemperatureRegister")
    public ResultSet addTemperatureRegister(TemperatureRegister temperatureRegiste) {
        temperatureRegisterService.insert(temperatureRegiste);
        return ResultSet.getSuccess();
    }


    /**
     * @return
     * @description 修改门店人员体温信息
     * @author GavinJiang
     * @date 2018/8/13 18:16
     * @params [temperatureRegiste]
     */
    @ResponseBody
    @RequestMapping("updateTemperatureRegister")
    public ResultSet updateTemperatureRegister(TemperatureRegister temperatureRegiste) {
        temperatureRegisterService.updateByPrimaryKeySelective(temperatureRegiste);
        return ResultSet.getSuccess();
    }

    /**
     * @return
     * @description 根据id删除门店人员体温信息
     * @author GavinJiang
     * @date 2018/8/13 18:21
     * @params [id]
     */
    @ResponseBody
    @RequestMapping("daleteTemperatureRegister")
    public ResultSet daleteTemperatureRegister(@NonNull String id) {
        temperatureRegisterService.deleteByPrimaryKey(id);
        return ResultSet.getSuccess();
    }

    /**
     * @return
     * @description 根据id批量删除门店人员体温信息
     * @author GavinJiang
     * @date 2018/8/13 18:27
     * @params [ids]
     */
    @ResponseBody
    @RequestMapping("daleteTemperatureRegisters")
    public ResultSet daleteTemperatureRegisters(@NonNull String ids) {
        String[] id = ids.split(",");
        for (int i = 0; i < id.length; i++) {
            temperatureRegisterService.deleteByPrimaryKey(id[i]);
        }
        return ResultSet.getSuccess();
    }
}
